# time_anchor.py
import sys
import os
import time
import sqlite3
import json
import random
import threading
from collections import OrderedDict
from pathlib import Path
from datetime import datetime
from PyQt5.QtWidgets import (
    QMainWindow, QLabel, QWidget, QVBoxLayout, QHBoxLayout,
    QPushButton, QDialog, QTreeWidget, QTreeWidgetItem, QLineEdit, QComboBox,
    QRadioButton, QButtonGroup, QCheckBox, QFileDialog, QMessageBox, QGroupBox,
    QScrollArea, QFrame, QSizePolicy, QInputDialog, QTabWidget, QLCDNumber, QGridLayout, QMenu, QApplication
)
from PyQt5.QtCore import Qt, QTimer, QTime, QSize, QRect, QPoint, QUrl
from PyQt5.QtGui import (
    QColor, QPalette, QFont, QPixmap, QMovie, QPainter, QBrush, QPen,
    QIcon, QFontDatabase
)
from PyQt5.QtMultimedia import QMediaPlayer, QMediaContent
from PyQt5.QtMultimediaWidgets import QVideoWidget

from utils import normalize_time, get_data_folder_path, get_db_path
from notification import NotificationWindow
from timetable_editor import TimetableEditor
from timer_window import TimerWindow

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
db_lock = threading.Lock()


class TimeOverlay(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("TimeAnchor PRO")
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.Tool)
        self.setAttribute(Qt.WA_TranslucentBackground)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π
        self.data_folder_path = Path.home() / "Documents" / "TimeAnchor"
        self.data_folder_path.mkdir(parents=True, exist_ok=True)
        self.db_path = self.data_folder_path / "timetable.db"
        self.settings_path = self.data_folder_path / "settings.json"

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.settings = {
            "sound_file": None,
            "active_timetable": "–û—Å–Ω–æ–≤–Ω–æ–µ",
            "notification_enabled": True,
            "notification_before_mins": 3,
            "notification_duration_secs": 10,
            "sound_before_file": None,
            "sound_now_file": None,
            "timer_sound_file": None,
            "theme": "dark",
            "opacity": 0.6  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 60% –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        }

        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.load_settings()
        self.create_notification_resources()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        self.conn = sqlite3.connect(str(self.db_path), check_same_thread=False)
        self.create_database()
        self.load_timetable()

        # –ú–µ–¥–∏–∞–ø–ª–µ–µ—Ä—ã –¥–ª—è –∑–≤—É–∫–æ–≤
        self.media_player = QMediaPlayer()  # –î–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–≤—É–∫–∞
        self.notification_player = QMediaPlayer()  # –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.timer_player = QMediaPlayer()  # –î–ª—è —Ç–∞–π–º–µ—Ä–∞

        # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.init_ui()
        self.setup_hotkeys()

        self.adjustSize()
        self.move_to_corner()

        # –¢–∞–π–º–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.check_timetable_loop)
        self.timer.start(2000)  # –ö–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.last_notified_before = None
        self.last_notified_now = None
        self.current_day = datetime.now().day  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–º–µ–Ω—ã –¥–Ω—è

        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤ showEvent

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–∫–æ–Ω
        self.editor = None
        self.timer_win = None
        self.task_window = None

    def move_to_corner(self):
        """–ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞"""
        screen_geometry = QApplication.primaryScreen().availableGeometry()
        self.move(screen_geometry.width() - self.width() - 20, 20)

    def showEvent(self, event):
        """–ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ"""
        super().showEvent(event)
        screen_geometry = QApplication.desktop().availableGeometry()
        self.move(screen_geometry.width() - self.width() - 20, 50)

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –ø–æ–¥–ª–æ–∂–∫–æ–π"""
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = QWidget(self)
        main_container.setObjectName("MainContainer")
        main_container.setGeometry(0, 0, 500, 350)

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—É—é –ø–æ–¥–ª–æ–∂–∫—É
        self.background = QWidget(main_container)
        self.background.setObjectName("Background")
        self.background.setGeometry(0, 0, main_container.width(), main_container.height())

        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–≤–µ—Ä—Ö –ø–æ–¥–ª–æ–∂–∫–∏
        self.create_overlay_ui(main_container)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
        self.apply_styles()
        self.setCentralWidget(main_container)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        main_container.installEventFilter(self)

    def eventFilter(self, obj, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞"""
        if event.type() == event.Resize:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–¥–ª–æ–∂–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
            self.background.setGeometry(0, 0, obj.width(), obj.height())
        return super().eventFilter(obj, event)

    def create_overlay_ui(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–≤–µ—Ä—Ö –ø–æ–¥–ª–æ–∂–∫–∏"""
        # –ì–ª–∞–≤–Ω—ã–π –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –ª–µ–π–∞—É—Ç
        main_layout = QVBoxLayout(parent)
        main_layout.setContentsMargins(10, 10, 10, 10)
        main_layout.setSpacing(5)

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –æ–∫–Ω–∞
        self.drag_widget = QWidget()
        self.drag_widget.setFixedHeight(5)
        self.drag_widget.setStyleSheet("background-color: transparent;")

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        top_button_frame = QWidget()
        top_button_layout = QHBoxLayout(top_button_frame)
        top_button_layout.setAlignment(Qt.AlignRight)
        top_button_layout.setContentsMargins(0, 0, 0, 0)

        # –ö–Ω–æ–ø–∫–∞ —Ç–∞–π–º–µ—Ä–∞
        self.timer_button = QPushButton("‚è±")
        self.timer_button.setFixedSize(30, 30)
        self.timer_button.setStyleSheet(self.get_button_style())
        self.timer_button.clicked.connect(self.open_timer_window)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–¥–∞—á
        self.task_button = QPushButton("üìã")
        self.task_button.setFixedSize(30, 30)
        self.task_button.setStyleSheet(self.get_button_style())
        self.task_button.clicked.connect(self.open_task_window)

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings_button = QPushButton("‚öô")
        self.settings_button.setFixedSize(30, 30)
        self.settings_button.setStyleSheet(self.get_button_style())
        self.settings_button.clicked.connect(self.open_timetable_editor)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –ø–∞–Ω–µ–ª—å
        top_button_layout.addStretch()
        top_button_layout.addWidget(self.timer_button)
        top_button_layout.addWidget(self.task_button)
        top_button_layout.addWidget(self.settings_button)

        # –û—Å–Ω–æ–≤–Ω–æ–π –ª–µ–π–±–ª —Å –∑–∞–¥–∞—á–µ–π
        self.task_label = QLabel("‚Üê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚Üí")
        self.task_label.setAlignment(Qt.AlignCenter)
        self.task_label.setFont(QFont("Consolas", 18))
        self.task_label.setStyleSheet("color: #00FF00; background-color: transparent;")

        # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        time_frame = QWidget()
        time_layout = QHBoxLayout(time_frame)
        time_layout.setContentsMargins(0, 0, 0, 0)

        self.time_start_label = QLabel("")
        self.time_start_label.setFont(QFont("Consolas", 10))
        self.time_start_label.setStyleSheet("color: gray;")

        self.time_end_label = QLabel("")
        self.time_end_label.setFont(QFont("Consolas", 10))
        self.time_end_label.setStyleSheet("color: gray;")
        self.time_end_label.setAlignment(Qt.AlignRight)

        time_layout.addWidget(self.time_start_label)
        time_layout.addStretch()
        time_layout.addWidget(self.time_end_label)

        # –°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞
        self.next_task_label = QLabel("")
        self.next_task_label.setFont(QFont("Consolas", 10))
        self.next_task_label.setStyleSheet("color: gray;")
        self.next_task_label.setAlignment(Qt.AlignRight)
        self.next_task_label.setWordWrap(True)

        # –°–±–æ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        main_layout.addWidget(self.drag_widget)
        main_layout.addWidget(top_button_frame)
        main_layout.addWidget(self.task_label)
        main_layout.addWidget(time_frame)
        main_layout.addWidget(self.next_task_label)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        self.setMinimumSize(200, 130)

    def apply_styles(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç–∏–ª–∏ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã
        if self.settings["theme"] == "dark":
            bg_color = f"rgba(20, 20, 20, {int(self.settings['opacity'] * 255)})"
            text_color = "#EEE"
            button_hover = "#555"
            button_pressed = "#666"
        else:
            bg_color = f"rgba(240, 240, 240, {int(self.settings['opacity'] * 255)})"
            text_color = "#333"
            button_hover = "#d0d0d0"
            button_pressed = "#c0c0c0"

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏
        self.setStyleSheet(f"""
            #Background {{
                background-color: {bg_color};
                border-radius: 10px;
                border: 1px solid #444;
            }}
            #MainContainer {{
                background: transparent;
            }}
            QPushButton {{
                background-color: #444;
                color: {text_color};
                border: none;
                border-radius: 15px;
                font-size: 14px;
            }}
            QPushButton:hover {{
                background-color: {button_hover};
            }}
            QPushButton:pressed {{
                background-color: {button_pressed};
            }}
            #CloseButton {{
                background-color: #ff5555;
                color: white;
                border-radius: 12px;
                font-weight: bold;
                font-size: 16px;
            }}
            #CloseButton:hover {{
                background-color: #ff7777;
            }}
            #CloseButton:pressed {{
                background-color: #ff3333;
            }}
            QLabel {{
                color: {text_color};
                background-color: transparent;
            }}
        """)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
        if self.settings["theme"] == "light":
            self.time_start_label.setStyleSheet("color: #333;")
            self.time_end_label.setStyleSheet("color: #333;")
            self.next_task_label.setStyleSheet("color: #333;")

    def get_button_style(self):
        if self.settings["theme"] == "dark":
            return """
                QPushButton {
                    background-color: #333;
                    color: #AAA;
                    border: none;
                    border-radius: 15px;
                }
                QPushButton:hover {
                    background-color: #444;
                    color: #FFF;
                }
            """
        else:
            return """
                QPushButton {
                    background-color: #EEE;
                    color: #555;
                    border: none;
                    border-radius: 15px;
                }
                QPushButton:hover {
                    background-color: #DDD;
                    color: #000;
                }
            """

    def apply_theme(self):
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º—ã
        if self.settings["theme"] == "light":
            self.time_start_label.setStyleSheet("color: #333;")
            self.time_end_label.setStyleSheet("color: #333;")
            self.next_task_label.setStyleSheet("color: #333;")

    def create_database(self):
        with db_lock:
            cursor = self.conn.cursor()
            cursor.execute('''CREATE TABLE IF NOT EXISTS timetable (
                                id INTEGER PRIMARY KEY,
                                time TEXT NOT NULL,
                                task TEXT,
                                color TEXT,
                                timetable_name TEXT,
                                UNIQUE(time, timetable_name))''')
            self.conn.commit()

    def load_settings(self):
        try:
            if self.settings_path.exists():
                with open(self.settings_path, "r") as f:
                    self.settings.update(json.load(f))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    def save_settings(self):
        try:
            with open(self.settings_path, "w") as f:
                json.dump(self.settings, f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

    def create_notification_resources(self):
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_before = self.data_folder_path / "images" / "before"
        images_now = self.data_folder_path / "images" / "now"
        images_before.mkdir(parents=True, exist_ok=True)
        images_now.mkdir(parents=True, exist_ok=True)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        before_txt = self.data_folder_path / "before.txt"
        now_txt = self.data_folder_path / "now.txt"

        if not before_txt.exists():
            with open(before_txt, 'w', encoding='utf-8') as f:
                f.write('"3 –º–∏–Ω—É—Ç—ã—ã—ã—ã ^^";\n"–ü–∞—Ä—É –º–∏–Ω—É—Ç –æ—Å—Ç–∞–ª–æ—Å—å!";')

        if not now_txt.exists():
            with open(now_txt, 'w', encoding='utf-8') as f:
                f.write('"–£–∂–µ –Ω–∞—á–∞–ª–æ—Å—å!";\n"–î–µ–π—Å—Ç–≤—É–π! :)";')

    def load_timetable(self):
        self.timetable = OrderedDict()
        with db_lock:
            cursor = self.conn.cursor()
            cursor.execute(
                "SELECT time, task, color, timetable_name FROM timetable WHERE timetable_name = ? ORDER BY time",
                (self.settings["active_timetable"],))

            for time_str, task, color, timetable_name in cursor.fetchall():
                self.timetable[time_str] = (task, color)

    def setup_hotkeys(self):
        # –í PyQt5 –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ —Å–ª–æ–∂–Ω–µ–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ—Å—Ç–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–Ω—É—Ç—Ä–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        pass

    def time_str_to_minutes(self, time_str):
        t = datetime.strptime(time_str, "%H:%M").time()
        return t.hour * 60 + t.minute

    def get_current_task(self):
        try:
            """–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∑–∞–¥–∞—á –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏"""
            now = datetime.now()
            current_time = now.time()
            current_min = current_time.hour * 60 + current_time.minute

            # –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ
            if not self.timetable:
                return ("–§–æ–∫—É—Å –Ω–∞ —Å–≤–æ–¥–Ω—ã—Ö —Ü–µ–ª—è—Ö", "#FFFFFF"), None, None, None

            # –ü–æ–ª—É—á–∏–º —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∏–Ω—É—Ç—ã
            times = list(self.timetable.keys())
            sorted_times = sorted(times, key=self.time_str_to_minutes)

            # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏
            has_midnight_task = any(self.time_str_to_minutes(t) < 360 for t in sorted_times)

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏ –∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏
            if has_midnight_task and current_time.hour < 6:
                # –î–æ–±–∞–≤–∏–º 24 —á–∞—Å–∞ –∫ –∑–∞–¥–∞—á–∞–º –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏
                adjusted_times = [
                    (t, self.time_str_to_minutes(t) + (1440 if self.time_str_to_minutes(t) < 360 else 0))
                    for t in sorted_times
                ]
            else:
                adjusted_times = [(t, self.time_str_to_minutes(t)) for t in sorted_times]

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
            adjusted_times.sort(key=lambda x: x[1])
            sorted_times = [t[0] for t in adjusted_times]

            # –û–ø—Ä–µ–¥–µ–ª–∏–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
            for i in range(len(sorted_times)):
                start_time = sorted_times[i]
                start_min = self.time_str_to_minutes(start_time)

                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –∑–∞–¥–∞—á –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏
                if has_midnight_task and start_min < 360 and current_time.hour < 6:
                    start_min += 1440

                if i == len(sorted_times) - 1:
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–¥–∞—á–∞ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
                    task_data = self.timetable[start_time]
                    return task_data, start_time, None, None

                next_time = sorted_times[i + 1]
                next_min = self.time_str_to_minutes(next_time)

                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –∑–∞–¥–∞—á –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏
                if has_midnight_task and next_min < 360 and current_time.hour < 6:
                    next_min += 1440

                if start_min <= current_min < next_min:
                    task_data = self.timetable[start_time]
                    next_task_data = self.timetable[next_time]
                    return task_data, start_time, next_time, next_task_data

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∑–∞–¥–∞—á–∏ (—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–Ω—å—à–µ –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏)
            first_time = sorted_times[0]
            task_data = self.timetable[first_time]


            for time_str, (task, color) in self.timetable.items():
                print(f"  {time_str}: {task}")

            return (task, color), start_time, next_time

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ get_current_task: {e}")
        return ("–û—à–∏–±–∫–∞", "#FF0000"), None, None, None

    def get_notification_text(self, text_file):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏–∑ —Ñ–∞–π–ª–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        if not text_file or not Path(text_file).is_file():
            return "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"

        try:
            with open(text_file, 'r', encoding='utf-8') as f:
                lines = [line.strip() for line in f.readlines() if line.strip()]
                # –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–≤—ã—á–µ–∫ - —Ç–µ–ø–µ—Ä—å —Ñ–∞–π–ª—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –±–µ–∑ –Ω–∏—Ö
                return random.choice(lines) if lines else "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
            return "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"

    def delete_timetable(self, name):
        if name == "–û—Å–Ω–æ–≤–Ω–æ–µ":
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
            return

        if QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ '{name}'?",
                                QMessageBox.Yes | QMessageBox.No) == QMessageBox.Yes:

            # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            with db_lock:
                cursor = self.conn.cursor()
                cursor.execute("DELETE FROM timetable WHERE timetable_name = ?", (name,))
                self.conn.commit()

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            self.timetable_names.remove(name)

            # –ï—Å–ª–∏ —É–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ
            if self.selected_timetable == name:
                self.selected_timetable = self.timetable_names[0] if self.timetable_names else "–û—Å–Ω–æ–≤–Ω–æ–µ"
                self.main_app.settings["active_timetable"] = self.selected_timetable
                self.main_app.save_settings()
                self.load_data()

            self.render_timetable_tabs()
            self.render_active_timetable_radio()

    def update_overlay(self, task, color, start_time=None, end_time=None, next_task_data=None, play_sound=False):
        if task:
            self.task_label.setText(f"‚Üê {task} ‚Üí")
            self.task_label.setStyleSheet(f"color: {color}; background-color: transparent;")
        else:
            self.task_label.setText("‚Üê –î–æ –Ω–∞—á–∞–ª–∞ –¥–Ω—è ‚Üí")
            self.task_label.setStyleSheet("color: #AAAAAA; background-color: transparent;")

        self.time_start_label.setText(start_time if start_time else "")
        self.time_end_label.setText(end_time if end_time else "")

        if next_task_data:
            next_task, _ = next_task_data
            self.next_task_label.setText(next_task)
        else:
            self.next_task_label.setText("")

        self.adjustSize()

        if play_sound and self.settings["sound_file"]:
            try:
                # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–≤—É–∫
                if self.media_player.state() == QMediaPlayer.PlayingState:
                    self.media_player.stop()

                media_content = QMediaContent(QUrl.fromLocalFile(self.settings["sound_file"]))
                self.media_player.setMedia(media_content)
                self.media_player.play()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞: {e}")

    def check_timetable_loop(self):
        try:
            now = datetime.now()
            # –°–±—Ä–æ—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–Ω—è
            if now.day != self.current_day:
                self.last_notified_before = None
                self.last_notified_now = None
                self.current_day = now.day

            current_time = now.time()
            now_minutes = current_time.hour * 60 + current_time.minute

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
            (task, color), start_time, next_time, next_task_data = self.get_current_task()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if self.settings["notification_enabled"]:
                # –î–ª—è before-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∑–∞ N –º–∏–Ω—É—Ç)
                if next_time:
                    next_time_obj = datetime.strptime(next_time, "%H:%M").time()
                    next_minutes = next_time_obj.hour * 60 + next_time_obj.minute

                    # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏–π –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏
                    if current_time.hour >= 18 and next_time_obj.hour < 6:
                        next_minutes += 1440  # –î–æ–±–∞–≤–ª—è–µ–º —Å—É—Ç–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö

                    time_diff = next_minutes - now_minutes

                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —Å–æ–±—ã—Ç–∏—è
                    if 0 <= time_diff <= self.settings["notification_before_mins"]:
                        if next_time != self.last_notified_before:
                            task_name = next_task_data[0] if next_task_data else "–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ"
                            self.show_notification("before", task_name)
                            self.last_notified_before = next_time

                # –î–ª—è now-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞)
                if start_time:
                    task_time = datetime.strptime(start_time, "%H:%M").time()
                    if (task_time.hour == current_time.hour and
                            task_time.minute == current_time.minute and
                            start_time != self.last_notified_now):
                        self.show_notification("now", task)
                        self.last_notified_now = start_time

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            play_sound = self.time_start_label.text() != (start_time if start_time else "")
            self.update_overlay(task, color, start_time, next_time, next_task_data, play_sound)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ check_timetable_loop: {e}")

    def show_notification(self, notif_type, task_name):
        if notif_type == "before":
            text_file = self.data_folder_path / "before.txt"
            sound_file = self.settings["sound_before_file"]
        else:
            text_file = self.data_folder_path / "now.txt"
            sound_file = self.settings["sound_now_file"]

        duration = self.settings["notification_duration_secs"]

        # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        self.notification = NotificationWindow(
            text_file,
            duration,
            task_name,
            self.settings["theme"]
        )
        self.notification.show()

        # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞
        if sound_file:
            try:
                # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–≤—É–∫
                if self.notification_player.state() == QMediaPlayer.PlayingState:
                    self.notification_player.stop()

                media_content = QMediaContent(QUrl.fromLocalFile(sound_file))
                self.notification_player.setMedia(media_content)
                self.notification_player.play()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞: {e}")

    def open_task_window(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –∑–∞–¥–∞—á —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        from task import TimeAnchorApp as TaskApp
        if self.task_window is None or not self.task_window.isVisible():
            self.task_window = TaskApp()

        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —Ä—è–¥–æ–º —Å –≥–ª–∞–≤–Ω—ã–º –æ–∫–Ω–æ–º
        main_pos = self.mapToGlobal(QPoint(0, 0))
        self.task_window.move(main_pos.x() - self.task_window.width() - 10, main_pos.y())

        self.task_window.show()
        self.task_window.raise_()
        self.task_window.activateWindow()

    def open_timetable_editor(self):
        # –ï—Å–ª–∏ –æ–∫–Ω–æ —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
        if self.editor is None:
            self.editor = TimetableEditor(self)
            self.editor.show()
            self.hide()
        else:
            self.editor.show()
            self.editor.activateWindow()

    def open_timer_window(self):
        # –ï—Å–ª–∏ –æ–∫–Ω–æ —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
        if self.timer_win is None:
            self.timer_win = TimerWindow(self)
            self.timer_win.show()
        else:
            self.timer_win.show()
            self.timer_win.activateWindow()

    def closeEvent(self, event):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ –æ–∫–Ω–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏"""
        if self.editor and self.editor.isVisible():
            self.editor.close()
        if self.timer_win and self.timer_win.isVisible():
            self.timer_win.close()
        if self.task_window and self.task_window.isVisible():
            self.task_window.close()
        event.accept()

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton and self.drag_widget.geometry().contains(event.pos()):
            self.old_pos = event.globalPos()

    def mouseMoveEvent(self, event):
        if event.buttons() == Qt.LeftButton and hasattr(self, 'old_pos'):
            delta = QPoint(event.globalPos() - self.old_pos)
            self.move(self.x() + delta.x(), self.y() + delta.y())
            self.old_pos = event.globalPos()
