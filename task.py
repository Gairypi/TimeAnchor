import os
import sys
import random
import json
import webbrowser
from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QPushButton,
    QLabel, QScrollArea, QMenu, QInputDialog, QMessageBox, QSizePolicy,
    QColorDialog
)
from PyQt5.QtCore import Qt, QStandardPaths
from PyQt5.QtGui import QFont, QColor


class TimeAnchorApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Task Generation")
        self.setGeometry(800, 400, 500, 350)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π
        self.documents_path = QStandardPaths.writableLocation(QStandardPaths.DocumentsLocation)
        self.base_folder = os.path.join(self.documents_path, "TimeAnchor")
        self.task_folder = os.path.join(self.base_folder, "Task")
        self.config_file = os.path.join(self.task_folder, "button_colors.json")

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        self.setup_folders()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤
        self.button_colors = self.load_button_colors()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.init_ui()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–æ–ø–æ–∫
        self.load_buttons()

    def setup_folders(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏ –∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
        os.makedirs(self.task_folder, exist_ok=True)

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        test_file = os.path.join(self.task_folder, "–¢–µ—Å—Ç.txt")
        if not os.path.exists(test_file):
            with open(test_file, 'w', encoding='utf-8') as f:
                f.write('"–¢–µ—Å—Ç –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ";\n')

        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not os.path.exists(self.config_file):
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump({}, f)

    def load_button_colors(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ü–≤–µ—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫"""
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except:
            pass
        return {}

    def save_button_colors(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ü–≤–µ—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫"""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(self.button_colors, f, ensure_ascii=False, indent=2)
            return True
        except Exception as e:
            self.show_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤: {str(e)}")
            return False

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        main_layout = QVBoxLayout()

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_layout = QHBoxLayout()

        self.btn_add = QPushButton("+ –î–æ–±–∞–≤–∏—Ç—å")
        self.btn_add.clicked.connect(self.add_new_button)
        self.btn_add.setStyleSheet("background-color: #4a86e8; color: white;")

        self.btn_refresh = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        self.btn_refresh.clicked.connect(self.refresh_buttons)
        self.btn_refresh.setStyleSheet("background-color: #4a86e8; color: white;")

        self.btn_random = QPushButton("üé≤ –†–∞–Ω–¥–æ–º")
        self.btn_random.clicked.connect(self.execute_random_action)
        self.btn_random.setStyleSheet("background-color: #4a86e8; color: white;")

        self.btn_help = QPushButton("?")
        self.btn_help.setFixedSize(20, 20)
        self.btn_help.setToolTip("–ü–æ–º–æ—â—å")
        self.btn_help.setStyleSheet("background-color: #4a86e8; color: white;")
        self.btn_help.clicked.connect(self.show_help)

        control_layout.addWidget(self.btn_add)
        control_layout.addWidget(self.btn_refresh)
        control_layout.addStretch()
        control_layout.addWidget(self.btn_random)
        control_layout.addWidget(self.btn_help)

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self.scroll_area = QScrollArea()
        self.scroll_area.setWidgetResizable(True)
        self.scroll_content = QWidget()
        self.buttons_layout = QHBoxLayout(self.scroll_content)
        self.buttons_layout.setAlignment(Qt.AlignLeft)
        self.scroll_area.setWidget(self.scroll_content)

        # –û–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.output_label = QLabel("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è")
        self.output_label.setAlignment(Qt.AlignCenter)
        self.output_label.setWordWrap(True)
        self.output_label.setMinimumHeight(60)
        self.output_label.setStyleSheet("""
            QLabel {
                background-color: #f0f0f0;
                border: 1px solid #d0d0d0;
                border-radius: 5px;
                padding: 10px;
                font-size: 14px;
            }
        """)

        # –°–±–æ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        main_layout.addLayout(control_layout)
        main_layout.addWidget(self.scroll_area, 1)
        main_layout.addWidget(self.output_label)

        self.setLayout(main_layout)

        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
        self.setStyleSheet("""
            QScrollArea {
                border: 1px solid #d0d0d0;
                border-radius: 5px;
            }
            QPushButton:hover {
                opacity: 0.9;
            }
            QPushButton:pressed {
                opacity: 0.8;
            }
        """)

    def load_buttons(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –∏–∑ –ø–∞–ø–∫–∏ Task"""
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–∏—Ö –∫–Ω–æ–ø–æ–∫
        while self.buttons_layout.count():
            item = self.buttons_layout.takeAt(0)
            widget = item.widget()
            if widget:
                widget.deleteLater()

        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        for file_name in os.listdir(self.task_folder):
            if file_name.endswith('.txt') and file_name != "button_colors.json":
                name = os.path.splitext(file_name)[0]
                self.create_button(name)

    def create_button(self, name):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º"""
        btn = QPushButton(name)
        btn.setMinimumSize(120, 40)
        btn.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞ –∫–Ω–æ–ø–∫–∏
        if name in self.button_colors:
            color = self.button_colors[name]
            btn.setStyleSheet(f"""
                QPushButton {{
                    background-color: {color};
                    color: white;
                    border: none;
                    padding: 8px 15px;
                    border-radius: 4px;
                    font-size: 14px;
                }}
            """)
        else:
            # –¶–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            btn.setStyleSheet("""
                QPushButton {
                    background-color: #4a86e8;
                    color: white;
                    border: none;
                    padding: 8px 15px;
                    border-radius: 4px;
                    font-size: 14px;
                }
            """)

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        btn.setContextMenuPolicy(Qt.CustomContextMenu)
        btn.customContextMenuRequested.connect(
            lambda pos, b=btn: self.show_context_menu(pos, b)
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        btn.clicked.connect(
            lambda checked, n=name: self.execute_action(n)
        )

        self.buttons_layout.addWidget(btn)

    def show_context_menu(self, pos, button):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∫–Ω–æ–ø–∫–∏"""
        menu = QMenu(self)

        rename_action = menu.addAction("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å")
        delete_action = menu.addAction("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
        color_action = menu.addAction("üé® –ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç")

        action = menu.exec_(button.mapToGlobal(pos))

        if action == rename_action:
            self.rename_button(button)
        elif action == delete_action:
            self.delete_button(button)
        elif action == color_action:
            self.change_button_color(button)

    def show_help(self):
        help_text = """
        <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∑–∞–¥–∞—á–∞–º–∏</b>
        <p>1. <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> –Ω–∞–∂–º–∏—Ç–µ "+ –î–æ–±–∞–≤–∏—Ç—å", –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.</p>
        <p>2. <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π:</b> –≤ –ø–∞–ø–∫–µ –î–æ–∫—É–º–µ–Ω—Ç—ã/TimeAnchor/Task —Å–æ–∑–¥–∞–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –í –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ —É–∫–∞–∂–∏—Ç–µ –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∫–∞–≤—ã—á–∫–∞—Ö —Å —Ç–æ—á–∫–æ–π —Å –∑–∞–ø—è—Ç–æ–π –≤ –∫–æ–Ω—Ü–µ. –í–ø–∏—Å–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –æ–∑–Ω–∞—á–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</p>
        <p>3. <b>–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:</b> –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –Ω–µ–µ.</p>
        <p>4. <b>–†–∞–Ω–¥–æ–º–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b> –∫–Ω–æ–ø–∫–∞ "üé≤ –†–∞–Ω–¥–æ–º" –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –ª—é–±–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.</p>
        <p>5. <b>–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é:</b> –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è, —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ —Å–º–µ–Ω—ã —Ü–≤–µ—Ç–∞.</p>
        """

        msg = QMessageBox(self)
        msg.setWindowTitle("–°–ø—Ä–∞–≤–∫–∞")
        msg.setTextFormat(Qt.RichText)
        msg.setText(help_text)
        msg.exec_()

    def change_button_color(self, button):
        """–ò–∑–º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏"""
        name = button.text()
        current_color = self.button_colors.get(name, "#4a86e8")

        # –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
        color = QColorDialog.getColor(QColor(current_color), self, "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏")
        if color.isValid():
            hex_color = color.name()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–∏
            button.setStyleSheet(f"""
                QPushButton {{
                    background-color: {hex_color};
                    color: white;
                    border: none;
                    padding: 8px 15px;
                    border-radius: 4px;
                    font-size: 14px;
                }}
            """)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self.button_colors[name] = hex_color
            self.save_button_colors()

    def rename_button(self, button):
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É"""
        old_name = button.text()
        new_name, ok = QInputDialog.getText(
            self,
            "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É",
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            text=old_name
        )

        if ok and new_name and new_name != old_name:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if old_name in self.button_colors:
                self.button_colors[new_name] = self.button_colors.pop(old_name)
                self.save_button_colors()

            button.setText(new_name)

    def delete_button(self, button):
        """–£–¥–∞–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –£–¥–∞–ª—è–µ–º —Ü–≤–µ—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        name = button.text()
        if name in self.button_colors:
            del self.button_colors[name]
            self.save_button_colors()

        button.deleteLater()

    def add_new_button(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É"""
        name, ok = QInputDialog.getText(
            self,
            "–ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞",
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏:"
        )

        if ok and name:
            # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            file_path = os.path.join(self.task_folder, f"{name}.txt")
            if not os.path.exists(file_path):
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write('"–ü—Ä–∏–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è";\n')

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
            self.create_button(name)

    def refresh_buttons(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫"""
        self.load_buttons()
        self.show_message("–ö–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

    def parse_action_file(self, file_name):
        """–ß–∏—Ç–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç —Ñ–∞–π–ª —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
        file_path = os.path.join(self.task_folder, f"{file_name}.txt")

        if not os.path.exists(file_path):
            return None, f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_name}.txt"

        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                lines = [line.strip() for line in f.readlines() if line.strip()]
        except Exception as e:
            return None, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}"

        if not lines:
            return None, f"–§–∞–π–ª –ø—É—Å—Ç: {file_name}.txt"

        return lines, None

    def execute_action(self, button_name):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            lines, error = self.parse_action_file(button_name)

            if error:
                self.show_error(error)
                return

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            action_line = random.choice(lines)

            # –ü–∞—Ä—Å–∏–º –¥–µ–π—Å—Ç–≤–∏–µ
            if action_line.startswith('"') and action_line.endswith('";'):
                action = action_line[1:-2]
            else:
                action = action_line

            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            if action.startswith('http://') or action.startswith('https://'):
                try:
                    webbrowser.open(action)
                    self.show_message(f"–û—Ç–∫—Ä—ã—Ç–æ: {action}")
                except Exception as e:
                    self.show_error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–∫–∏: {str(e)}")
            else:
                self.show_message(action)
        except Exception as e:
            self.show_error(f"–û—à–∏–±–∫–∞: {str(e)}")

    def execute_random_action(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"""
        all_actions = []

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        for file_name in os.listdir(self.task_folder):
            if file_name.endswith('.txt') and file_name != "button_colors.json":
                lines, error = self.parse_action_file(os.path.splitext(file_name)[0])
                if error or not lines:
                    continue

                for line in lines:
                    if line.startswith('"') and line.endswith('";'):
                        action = line[1:-2]
                    else:
                        action = line
                    all_actions.append(action)

        if not all_actions:
            self.show_error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π")
            return

        # –í—ã–±–∏—Ä–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        random_action = random.choice(all_actions)

        if random_action.startswith('http://') or random_action.startswith('https://'):
            try:
                webbrowser.open(random_action)
                self.show_message(f"–°–ª—É—á–∞–π–Ω–∞—è —Å—Å—ã–ª–∫–∞: {random_action}")
            except Exception as e:
                self.show_error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–∫–∏: {str(e)}")
        else:
            self.show_message(f"–°–ª—É—á–∞–π–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {random_action}")

    def show_message(self, text):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.output_label.setStyleSheet("color: black;")
        self.output_label.setText(text)

    def show_error(self, text):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        self.output_label.setStyleSheet("color: red;")
        self.output_label.setText(text)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setStyle("Fusion")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —à—Ä–∏—Ñ—Ç
    font = QFont("Segoe UI", 10)
    app.setFont(font)

    window = TimeAnchorApp()
    window.show()
    sys.exit(app.exec_())