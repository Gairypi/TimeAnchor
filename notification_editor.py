# notification_editor.py
import os
from pathlib import Path
from PyQt5.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, QListWidget,
    QListWidgetItem, QMessageBox, QInputDialog, QApplication, QFrame, QMenu,
    QSpinBox, QLineEdit, QFileDialog, QStyle, QStyleOption, QGridLayout, QCheckBox
)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QPainter, QColor


class NotificationEditor(QDialog):
    def __init__(self, main_app):
        super().__init__()
        self.main_app = main_app
        self.setWindowTitle("–†–µ–¥–∞–∫—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        self.setGeometry(400, 300, 700, 500)

        self.data_folder = Path.home() / "Documents" / "TimeAnchor"
        self.before_file = self.data_folder / "before.txt"
        self.now_file = self.data_folder / "now.txt"

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        self.before_items = self.load_items(self.before_file)
        self.now_items = self.load_items(self.now_file)

        self.init_ui()
        self.apply_theme()

    def paintEvent(self, event):
        """–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π –≤ QDialog"""
        opt = QStyleOption()
        opt.initFrom(self)
        painter = QPainter(self)
        self.style().drawPrimitive(QStyle.PE_Widget, opt, painter, self)

    def load_items(self, file_path):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        items = []
        if file_path.exists():
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    for line in f:
                        line = line.strip().strip('";')
                        if line:
                            items.append(line)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return items

    def save_items(self, items, file_path):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Ñ–∞–π–ª"""
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                for item in items:
                    f.write(f'"{item}";\n')
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return False

    def init_ui(self):
        main_layout = QVBoxLayout()
        main_layout.setSpacing(15)
        main_layout.setContentsMargins(15, 15, 15, 15)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_layout = QHBoxLayout()
        title_layout.addWidget(QLabel("–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", alignment=Qt.AlignCenter))
        main_layout.addLayout(title_layout)

        # –î–≤–µ –∫–æ–ª–æ–Ω–∫–∏ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
        columns_layout = QHBoxLayout()
        columns_layout.setSpacing(15)

        # –ö–æ–ª–æ–Ω–∫–∞ "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
        before_frame = QFrame()
        before_frame.setFrameShape(QFrame.StyledPanel)
        before_layout = QVBoxLayout(before_frame)
        before_layout.setSpacing(8)

        before_label = QLabel("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–¥–æ –Ω–∞—á–∞–ª–∞)")
        before_label.setAlignment(Qt.AlignCenter)
        before_layout.addWidget(before_label)

        self.before_list = QListWidget()
        self.before_list.addItems(self.before_items)
        self.before_list.setContextMenuPolicy(Qt.CustomContextMenu)
        self.before_list.customContextMenuRequested.connect(
            lambda pos: self.show_context_menu(pos, self.before_list, "before")
        )
        before_layout.addWidget(self.before_list)

        add_before_btn = QPushButton("+ –î–æ–±–∞–≤–∏—Ç—å")
        add_before_btn.clicked.connect(lambda: self.add_item(self.before_list, "before"))
        before_layout.addWidget(add_before_btn)

        columns_layout.addWidget(before_frame, 1)  # –†–∞–≤–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏

        # –ö–æ–ª–æ–Ω–∫–∞ "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
        now_frame = QFrame()
        now_frame.setFrameShape(QFrame.StyledPanel)
        now_layout = QVBoxLayout(now_frame)
        now_layout.setSpacing(8)

        now_label = QLabel("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω–∞—á–∞–ª–æ)")
        now_label.setAlignment(Qt.AlignCenter)
        now_layout.addWidget(now_label)

        self.now_list = QListWidget()
        self.now_list.addItems(self.now_items)
        self.now_list.setContextMenuPolicy(Qt.CustomContextMenu)
        self.now_list.customContextMenuRequested.connect(
            lambda pos: self.show_context_menu(pos, self.now_list, "now")
        )
        now_layout.addWidget(self.now_list)

        add_now_btn = QPushButton("+ –î–æ–±–∞–≤–∏—Ç—å")
        add_now_btn.clicked.connect(lambda: self.add_item(self.now_list, "now"))
        now_layout.addWidget(add_now_btn)

        columns_layout.addWidget(now_frame, 1)  # –†–∞–≤–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        main_layout.addLayout(columns_layout, 1)  # –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å –æ–∫–Ω–∞

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        settings_frame = QFrame()
        settings_layout = QVBoxLayout(settings_frame)
        settings_layout.setSpacing(10)

        # –ß–µ–∫–±–æ–∫—Å –∏ –ø–æ–ª—è –≤–≤–æ–¥–∞
        self.notif_check = QCheckBox("–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        self.notif_check.setChecked(self.main_app.settings["notification_enabled"])
        settings_layout.addWidget(self.notif_check)

        # –°–µ—Ç–∫–∞ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
        grid_layout = QGridLayout()

        grid_layout.addWidget(QLabel("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ (–º–∏–Ω):"), 0, 0)
        self.before_mins_edit = QSpinBox()
        self.before_mins_edit.setRange(1, 60)
        self.before_mins_edit.setValue(self.main_app.settings["notification_before_mins"])
        grid_layout.addWidget(self.before_mins_edit, 0, 1)

        grid_layout.addWidget(QLabel("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫):"), 1, 0)
        self.duration_edit = QSpinBox()
        self.duration_edit.setRange(1, 60)
        self.duration_edit.setValue(self.main_app.settings["notification_duration_secs"])
        grid_layout.addWidget(self.duration_edit, 1, 1)

        settings_layout.addLayout(grid_layout)

        # –ö–Ω–æ–ø–∫–∏ –∑–≤—É–∫–æ–≤
        sound_layout = QHBoxLayout()
        self.sound_before_btn = QPushButton("–ó–≤—É–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è...")
        self.sound_before_btn.clicked.connect(lambda: self.choose_sound_file("before"))

        self.sound_now_btn = QPushButton("–ó–≤—É–∫ –Ω–∞—á–∞–ª–∞...")
        self.sound_now_btn.clicked.connect(lambda: self.choose_sound_file("now"))

        sound_layout.addWidget(self.sound_before_btn)
        sound_layout.addWidget(self.sound_now_btn)
        settings_layout.addLayout(sound_layout)

        main_layout.addWidget(settings_frame)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()

        help_btn = QPushButton("?")
        help_btn.setFixedWidth(30)
        help_btn.clicked.connect(self.show_help)

        save_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        save_btn.clicked.connect(self.save_settings)

        cancel_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        cancel_btn.clicked.connect(self.close)

        buttons_layout.addWidget(help_btn)
        buttons_layout.addStretch()
        buttons_layout.addWidget(save_btn)
        buttons_layout.addWidget(cancel_btn)

        main_layout.addLayout(buttons_layout)
        self.setLayout(main_layout)

    def show_context_menu(self, pos, list_widget, list_type):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Å–ø–∏—Å–∫–∞"""
        item = list_widget.itemAt(pos)
        if not item:
            return

        menu = QMenu(self)

        rename_action = menu.addAction("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å")
        delete_action = menu.addAction("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")

        action = menu.exec_(list_widget.mapToGlobal(pos))

        if action == rename_action:
            self.rename_item(item, list_type)
        elif action == delete_action:
            self.delete_item(item, list_type)

    def rename_item(self, item, list_type):
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç"""
        new_text, ok = QInputDialog.getText(
            self,
            "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å",
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:",
            text=item.text()
        )

        if ok and new_text:
            item.setText(new_text)
            self.update_list_data(list_type)

    def delete_item(self, item, list_type):
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç"""
        row = self.before_list.row(item) if list_type == "before" else self.now_list.row(item)

        if list_type == "before":
            self.before_list.takeItem(row)
        else:
            self.now_list.takeItem(row)

        self.update_list_data(list_type)

    def add_item(self, list_widget, list_type):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫"""
        default_text = "–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –∑–∞–¥–∞—á–∞" if list_type == "before" else "–£–∂–µ –Ω–∞—á–∞–ª–æ—Å—å"
        new_item = QListWidgetItem(default_text)
        list_widget.addItem(new_item)
        self.update_list_data(list_type)

    def update_list_data(self, list_type):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Å–ø–∏—Å–∫–µ"""
        if list_type == "before":
            self.before_items = [self.before_list.item(i).text() for i in range(self.before_list.count())]
        else:
            self.now_items = [self.now_list.item(i).text() for i in range(self.now_list.count())]

    def choose_sound_file(self, sound_type):
        file_name, _ = QFileDialog.getOpenFileName(
            self,
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–≤—É–∫–æ–≤–æ–π —Ñ–∞–π–ª",
            "",
            "–ê—É–¥–∏–æ —Ñ–∞–π–ª—ã (*.mp3 *.wav);;–í—Å–µ —Ñ–∞–π–ª—ã (*)"
        )

        if file_name:
            if sound_type == "before":
                self.main_app.settings["sound_before_file"] = file_name
            else:
                self.main_app.settings["sound_now_file"] = file_name

    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.save_items(self.before_items, self.before_file)
        self.save_items(self.now_items, self.now_file)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        try:
            self.main_app.settings.update({
                "notification_enabled": self.notif_check.isChecked(),
                "notification_before_mins": self.before_mins_edit.value(),
                "notification_duration_secs": self.duration_edit.value()
            })
            self.main_app.save_settings()
            QMessageBox.information(self, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")

    def show_help(self):
        help_text = """
        <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>

        <p><b>–ö–æ–ª–æ–Ω–∫–∞ "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":</b></p>
        <ul>
            <li>–°–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—á–∏</li>
            <li>–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ "+ –î–æ–±–∞–≤–∏—Ç—å"</li>
            <li>–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–ª–∏–∫–Ω–∏—Ç–µ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å"</li>
            <li>–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–ª–∏–∫–Ω–∏—Ç–µ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–£–¥–∞–ª–∏—Ç—å"</li>
        </ul>

        <p><b>–ö–æ–ª–æ–Ω–∫–∞ "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ":</b></p>
        <ul>
            <li>–°–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ –º–æ–º–µ–Ω—Ç –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—á–∏</li>
            <li>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–æ–ª–æ–Ω–∫–µ "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"</li>
        </ul>

        <p><b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b></p>
        <ul>
            <li><b>–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</li>
            <li><b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ (–º–∏–Ω):</b> –∑–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</li>
            <li><b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫):</b> —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</li>
            <li><b>–ó–≤—É–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</b> –∑–≤—É–∫ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–¥–æ –Ω–∞—á–∞–ª–∞)</li>
            <li><b>–ó–≤—É–∫ –Ω–∞—á–∞–ª–∞:</b> –∑–≤—É–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ</li>
        </ul>

        <p>–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å <b>"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"</b> –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π!</p>
        """

        msg = QMessageBox(self)
        msg.setWindowTitle("–°–ø—Ä–∞–≤–∫–∞")
        msg.setTextFormat(Qt.RichText)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã
        if self.main_app.settings["theme"] == "dark":
            msg.setStyleSheet("""
                QMessageBox {
                    background-color: #333;
                }
                QLabel {
                    color: white;
                }
                QPushButton {
                    background-color: #444;
                    color: #EEE;
                    border: 1px solid #555;
                    padding: 5px;
                    border-radius: 4px;
                }
                QPushButton:hover {
                    background-color: #555;
                }
            """)
        else:
            msg.setStyleSheet("""
                QLabel {
                    color: black;
                }
            """)

        msg.setText(help_text)
        msg.exec_()

    def apply_theme(self):
        theme = self.main_app.settings["theme"]
        if theme == "dark":
            style = """
                QDialog {
                    background-color: #333;
                    color: #EEE;
                }
                QFrame {
                    background-color: #2d2d2d;
                    border: 1px solid #444;
                    border-radius: 5px;
                }
                QLabel, QRadioButton, QListWidget, QSpinBox, QCheckBox {
                    color: #EEE;
                }
                QListWidget {
                    background-color: #222;
                    color: #EEE;
                    border: 1px solid #444;
                }
                QLineEdit, QSpinBox {
                    background-color: #333;
                    color: #EEE;
                    border: 1px solid #555;
                }
                QPushButton {
                    background-color: #444;
                    color: #EEE;
                    border: 1px solid #555;
                    padding: 5px;
                    border-radius: 4px;
                }
                QPushButton:hover {
                    background-color: #555;
                }
            """
        else:
            style = """
                QDialog {
                    background-color: #f0f0f0;
                    color: #333;
                }
                QFrame {
                    background-color: #FFF;
                    border: 1px solid #CCC;
                    border-radius: 5px;
                }
                QListWidget {
                    background-color: #FFF;
                    color: #333;
                    border: 1px solid #CCC;
                }
                QLineEdit, QSpinBox {
                    background-color: #FFF;
                    color: #333;
                    border: 1px solid #CCC;
                }
                QPushButton {
                    background-color: #e0e0e0;
                    color: #333;
                    border: 1px solid #CCC;
                    padding: 5px;
                    border-radius: 4px;
                }
                QPushButton:hover {
                    background-color: #d0d0d0;
                }
            """
        self.setStyleSheet(style)